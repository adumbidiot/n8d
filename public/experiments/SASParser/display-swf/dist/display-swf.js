var DisplaySWF = (function () {
	'use strict';

	function noop() {}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function destroyEach(iterations, detach) {
		for (var i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d(detach);
		}
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function addListener(node, event, handler) {
		node.addEventListener(event, handler, false);
	}

	function removeListener(node, event, handler) {
		node.removeEventListener(event, handler, false);
	}

	function setAttribute(node, attribute, value) {
		node.setAttribute(attribute, value);
	}

	function setStyle(node, key, value) {
		node.style.setProperty(key, value);
	}

	function blankObject() {
		return Object.create(null);
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = noop;

		this._fragment.d(detach !== false);
		this._fragment = null;
		this._state = {};
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				handler.__calling = true;
				handler.call(this, data);
				handler.__calling = false;
			}
		}
	}

	function get() {
		return this._state;
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = component.root.store || options.store;
	}

	function on(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	var proto = {
		destroy,
		get,
		fire,
		on,
		set,
		_recompute: noop,
		_set,
		_mount,
		_differs
	};

	/* src\display-swf-nav.html generated by Svelte v2.7.1 */

	function data(){
		return {
			navURL: 'games/pong.swf'
		}
	}
	var methods = {
		go(event){
			const url = this.get().navURL;
			this.fire('nav', {url});
		}
	};

	function add_css() {
		var style = createElement("style");
		style.id = 'svelte-d4wqze-style';
		style.textContent = ".nav.svelte-d4wqze{width:100%;height:3rem;background-color:grey;position:static;float:right;display:inline}.nav-item.svelte-d4wqze{height:2rem;left:0.5rem;top:0.5rem;position:relative}.nav-input.svelte-d4wqze{width:12rem;border:0px;border-top-right-radius:1rem;border-bottom-right-radius:1rem;outline:none}.nav-button.svelte-d4wqze{background-color:green;width:6rem;float:left;display:flex;align-items:center;justify-content:center;user-select:none;border-top-left-radius:1rem;border-bottom-left-radius:1rem}.nav-button.svelte-d4wqze:active{background-color:#00FF00}";
		appendNode(style, document.head);
	}

	function create_main_fragment(component, ctx) {
		var div, input, input_updating = false, text, div_1;

		function input_input_handler() {
			input_updating = true;
			component.set({ navURL: input.value });
			input_updating = false;
		}

		function click_handler(event) {
			component.go(event);
		}

		return {
			c() {
				div = createElement("div");
				input = createElement("input");
				text = createText("\r\n\t");
				div_1 = createElement("div");
				div_1.innerHTML = "<p style=\"color: #00FF00;\">Go</p>";
				addListener(input, "input", input_input_handler);
				setAttribute(input, "type", "text");
				input.className = "nav-input nav-item svelte-d4wqze";
				addListener(div_1, "click", click_handler);
				div_1.className = "nav-button nav-item svelte-d4wqze";
				div.className = "nav svelte-d4wqze";
			},

			m(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(input, div);

				input.value = ctx.navURL;

				appendNode(text, div);
				appendNode(div_1, div);
			},

			p(changed, ctx) {
				if (!input_updating) input.value = ctx.navURL;
			},

			d(detach) {
				if (detach) {
					detachNode(div);
				}

				removeListener(input, "input", input_input_handler);
				removeListener(div_1, "click", click_handler);
			}
		};
	}

	function Display_swf_nav(options) {
		init(this, options);
		this._state = assign(data(), options.data);
		this._intro = true;

		if (!document.getElementById("svelte-d4wqze-style")) add_css();

		this._fragment = create_main_fragment(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);
		}
	}

	assign(Display_swf_nav.prototype, proto);
	assign(Display_swf_nav.prototype, methods);

	/* src\display-swf.html generated by Svelte v2.7.1 */

	function getNewParser(SWFTools){
		return new SWFTools.SWFParser();
	}

	function parser({SWFTools}) {
		return getNewParser(SWFTools);
	}

	function data$1(){
		return {
			SWFTools: SWFTools
		}
	}
	var methods$1 = {
		onNav(e){
			const url = e.url;
			const {parser} = this.get();
			console.log(parser);
			SWFTools.fetchAndParse(parser, url);
		}
		
	};

	function add_css$1() {
		var style = createElement("style");
		style.id = 'svelte-8xdkue-style';
		style.textContent = ".main.svelte-8xdkue{width:100%;height:100%;background-color:black;position:relative}";
		appendNode(style, document.head);
	}

	function create_main_fragment$1(component, ctx) {
		var div, div_1, text;

		var displayswfnav = new Display_swf_nav({
			root: component.root
		});

		displayswfnav.on("nav", function(event) {
			component.onNav(event);
		});

		var if_block = (ctx.displayStartInfo) && create_if_block(component, ctx);

		return {
			c() {
				div = createElement("div");
				div_1 = createElement("div");
				displayswfnav._fragment.c();
				text = createText("\r\n\t\t");
				if (if_block) if_block.c();
				div_1.className = "main svelte-8xdkue";
			},

			m(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				displayswfnav._mount(div_1, null);
				appendNode(text, div_1);
				if (if_block) if_block.m(div_1, null);
			},

			p(changed, ctx) {
				if (ctx.displayStartInfo) {
					if (if_block) {
						if_block.p(changed, ctx);
					} else {
						if_block = create_if_block(component, ctx);
						if_block.c();
						if_block.m(div_1, null);
					}
				} else if (if_block) {
					if_block.d(1);
					if_block = null;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(div);
				}

				displayswfnav.destroy();
				if (if_block) if_block.d();
			}
		};
	}

	// (38:4) {#each swfTags as tag}
	function create_each_block(component, ctx) {
		var details, summary, text, text_1, text_2_value = ctx.recordHeader.code, text_2, text_3, text_4, p;

		return {
			c() {
				details = createElement("details");
				summary = createElement("summary");
				text = createText(ctx.name);
				text_1 = createText(" (code=");
				text_2 = createText(text_2_value);
				text_3 = createText(")");
				text_4 = createText("\r\n\t\t\t\t\t\t");
				p = createElement("p");
				p.textContent = "WIP";
			},

			m(target, anchor) {
				insertNode(details, target, anchor);
				appendNode(summary, details);
				appendNode(text, summary);
				appendNode(text_1, summary);
				appendNode(text_2, summary);
				appendNode(text_3, summary);
				appendNode(text_4, details);
				appendNode(p, details);
			},

			p(changed, ctx) {
				if (changed.name) {
					text.data = ctx.name;
				}

				if ((changed.recordHeader) && text_2_value !== (text_2_value = ctx.recordHeader.code)) {
					text_2.data = text_2_value;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(details);
				}
			}
		};
	}

	// (21:2) {#if displayStartInfo}
	function create_if_block(component, ctx) {
		var div, div_1, text_2, div_2, text_3, text_4_value = ctx.SWFTools.VERSION, text_4, text_5, div_3, text_6, text_7_value = ctx.SWFTools.SWFParser.VERSION, text_7, text_8, div_4, text_9, text_10, text_11, div_5, text_12, text_13, text_14, div_6, text_15, text_16_value = ctx.startTime.getTime(), text_16, text_17, text_18, div_7, text_19, text_20_value = ctx.endTime.getTime(), text_20, text_21, text_22, div_8, text_23, text_24, text_25, text_26, div_9, text_27, text_28, text_29, text_30, div_10, text_31, text_32, text_33, text_34, div_11, text_36, br, text_37, div_12, text_39, text_40, div_13, text_42, div_14;

		var each_value = ctx.swfTags;

		var each_blocks = [];

		for (var i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(component, get_each_context(ctx, each_value, i));
		}

		return {
			c() {
				div = createElement("div");
				div_1 = createElement("div");
				div_1.innerHTML = "<b>[ STATS ]</b>";
				text_2 = createText("\r\n\t\t\t\t");
				div_2 = createElement("div");
				text_3 = createText("SWFTools Version ");
				text_4 = createText(text_4_value);
				text_5 = createText("\r\n\t\t\t\t");
				div_3 = createElement("div");
				text_6 = createText("SWFParser Version ");
				text_7 = createText(text_7_value);
				text_8 = createText("\r\n\t\t\t\t");
				div_4 = createElement("div");
				text_9 = createText("Start Time: ");
				text_10 = createText(ctx.startTime);
				text_11 = createText("\r\n\t\t\t\t");
				div_5 = createElement("div");
				text_12 = createText("End Time: ");
				text_13 = createText(ctx.endTime);
				text_14 = createText("\r\n\t\t\t\t");
				div_6 = createElement("div");
				text_15 = createText("Start Epoch Time: ");
				text_16 = createText(text_16_value);
				text_17 = createText("ms");
				text_18 = createText("\r\n\t\t\t\t");
				div_7 = createElement("div");
				text_19 = createText("End Epoch Time: ");
				text_20 = createText(text_20_value);
				text_21 = createText("ms");
				text_22 = createText("\r\n\t\t\t\t");
				div_8 = createElement("div");
				text_23 = createText("Parse Time: ");
				text_24 = createText(ctx.parseTime);
				text_25 = createText("ms");
				text_26 = createText("\r\n\t\t\t\t");
				div_9 = createElement("div");
				text_27 = createText("Tags Per Millisecond: ");
				text_28 = createText(ctx.tps);
				text_29 = createText(" tags/ms");
				text_30 = createText("\r\n\t\t\t\t");
				div_10 = createElement("div");
				text_31 = createText("Tags Parsed: ");
				text_32 = createText(ctx.tagsParsed);
				text_33 = createText(" tags");
				text_34 = createText("\r\n\t\t\t\t");
				div_11 = createElement("div");
				div_11.innerHTML = "<b>[ /STATS ]</b>";
				text_36 = createText("\r\n\t\t\t\t");
				br = createElement("br");
				text_37 = createText("\r\n\t\t\t\t");
				div_12 = createElement("div");
				div_12.innerHTML = "<b>[ BODY ]</b>";
				text_39 = createText("\r\n\t\t\t\t");

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				text_40 = createText("\r\n\t\t\t\t");
				div_13 = createElement("div");
				div_13.innerHTML = "<b>[ /BODY ]</b>";
				text_42 = createText("\r\n\t\t\t\t");
				div_14 = createElement("div");
				setAttribute(div_14, "ref", "output");
				setStyle(div, "color", "green");
				setStyle(div, "top", "3rem");
				setStyle(div, "position", "absolute");
				setStyle(div, "overflow-y", "scroll");
				setStyle(div, "width", "100%");
				setStyle(div, "bottom", "0rem");
			},

			m(target, anchor) {
				insertNode(div, target, anchor);
				appendNode(div_1, div);
				appendNode(text_2, div);
				appendNode(div_2, div);
				appendNode(text_3, div_2);
				appendNode(text_4, div_2);
				appendNode(text_5, div);
				appendNode(div_3, div);
				appendNode(text_6, div_3);
				appendNode(text_7, div_3);
				appendNode(text_8, div);
				appendNode(div_4, div);
				appendNode(text_9, div_4);
				appendNode(text_10, div_4);
				appendNode(text_11, div);
				appendNode(div_5, div);
				appendNode(text_12, div_5);
				appendNode(text_13, div_5);
				appendNode(text_14, div);
				appendNode(div_6, div);
				appendNode(text_15, div_6);
				appendNode(text_16, div_6);
				appendNode(text_17, div_6);
				appendNode(text_18, div);
				appendNode(div_7, div);
				appendNode(text_19, div_7);
				appendNode(text_20, div_7);
				appendNode(text_21, div_7);
				appendNode(text_22, div);
				appendNode(div_8, div);
				appendNode(text_23, div_8);
				appendNode(text_24, div_8);
				appendNode(text_25, div_8);
				appendNode(text_26, div);
				appendNode(div_9, div);
				appendNode(text_27, div_9);
				appendNode(text_28, div_9);
				appendNode(text_29, div_9);
				appendNode(text_30, div);
				appendNode(div_10, div);
				appendNode(text_31, div_10);
				appendNode(text_32, div_10);
				appendNode(text_33, div_10);
				appendNode(text_34, div);
				appendNode(div_11, div);
				appendNode(text_36, div);
				appendNode(br, div);
				appendNode(text_37, div);
				appendNode(div_12, div);
				appendNode(text_39, div);

				for (var i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].m(div, null);
				}

				appendNode(text_40, div);
				appendNode(div_13, div);
				appendNode(text_42, div);
				appendNode(div_14, div);
			},

			p(changed, ctx) {
				if ((changed.SWFTools) && text_4_value !== (text_4_value = ctx.SWFTools.VERSION)) {
					text_4.data = text_4_value;
				}

				if ((changed.SWFTools) && text_7_value !== (text_7_value = ctx.SWFTools.SWFParser.VERSION)) {
					text_7.data = text_7_value;
				}

				if (changed.startTime) {
					text_10.data = ctx.startTime;
				}

				if (changed.endTime) {
					text_13.data = ctx.endTime;
				}

				if ((changed.startTime) && text_16_value !== (text_16_value = ctx.startTime.getTime())) {
					text_16.data = text_16_value;
				}

				if ((changed.endTime) && text_20_value !== (text_20_value = ctx.endTime.getTime())) {
					text_20.data = text_20_value;
				}

				if (changed.parseTime) {
					text_24.data = ctx.parseTime;
				}

				if (changed.tps) {
					text_28.data = ctx.tps;
				}

				if (changed.tagsParsed) {
					text_32.data = ctx.tagsParsed;
				}

				if (changed.name || changed.recordHeader || changed.swfTags) {
					each_value = ctx.swfTags;

					for (var i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(changed, child_ctx);
						} else {
							each_blocks[i] = create_each_block(component, child_ctx);
							each_blocks[i].c();
							each_blocks[i].m(div, text_40);
						}
					}

					for (; i < each_blocks.length; i += 1) {
						each_blocks[i].d(1);
					}
					each_blocks.length = each_value.length;
				}
			},

			d(detach) {
				if (detach) {
					detachNode(div);
				}

				destroyEach(each_blocks, detach);
			}
		};
	}

	function get_each_context(ctx, list, i) {
		const child_ctx = Object.create(ctx);
		child_ctx.tag = list[i];
		child_ctx.each_value = list;
		child_ctx.tag_index = i;
		return child_ctx;
	}

	function Display_swf(options) {
		init(this, options);
		this._state = assign(data$1(), options.data);
		this._recompute({ SWFTools: 1 }, this._state);
		this._intro = true;

		if (!document.getElementById("svelte-8xdkue-style")) add_css$1();

		if (!options.root) {
			this._oncreate = [];
			this._beforecreate = [];
			this._aftercreate = [];
		}

		this._fragment = create_main_fragment$1(this, this._state);

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			this._lock = true;
			callAll(this._beforecreate);
			callAll(this._oncreate);
			callAll(this._aftercreate);
			this._lock = false;
		}
	}

	assign(Display_swf.prototype, proto);
	assign(Display_swf.prototype, methods$1);

	Display_swf.prototype._recompute = function _recompute(changed, state) {
		if (changed.SWFTools) {
			if (this._differs(state.parser, (state.parser = parser(state)))) changed.parser = true;
		}
	};

	return Display_swf;

}());
