var n8dNavbar = (function () {
	'use strict';

	function noop() {}

	function assign(tar, src) {
		for (var k in src) tar[k] = src[k];
		return tar;
	}

	function assignTrue(tar, src) {
		for (var k in src) tar[k] = 1;
		return tar;
	}

	function appendNode(node, target) {
		target.appendChild(node);
	}

	function insertNode(node, target, anchor) {
		target.insertBefore(node, anchor);
	}

	function detachNode(node) {
		node.parentNode.removeChild(node);
	}

	function createElement(name) {
		return document.createElement(name);
	}

	function createText(data) {
		return document.createTextNode(data);
	}

	function setStyle(node, key, value) {
		node.style.setProperty(key, value);
	}

	function blankObject() {
		return Object.create(null);
	}

	function destroy(detach) {
		this.destroy = noop;
		this.fire('destroy');
		this.set = noop;

		this._fragment.d(detach !== false);
		this._fragment = null;
		this._state = {};
	}

	function _differs(a, b) {
		return a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');
	}

	function fire(eventName, data) {
		var handlers =
			eventName in this._handlers && this._handlers[eventName].slice();
		if (!handlers) return;

		for (var i = 0; i < handlers.length; i += 1) {
			var handler = handlers[i];

			if (!handler.__calling) {
				handler.__calling = true;
				handler.call(this, data);
				handler.__calling = false;
			}
		}
	}

	function get() {
		return this._state;
	}

	function init(component, options) {
		component._handlers = blankObject();
		component._bind = options._bind;

		component.options = options;
		component.root = options.root || component;
		component.store = component.root.store || options.store;
	}

	function on(eventName, handler) {
		var handlers = this._handlers[eventName] || (this._handlers[eventName] = []);
		handlers.push(handler);

		return {
			cancel: function() {
				var index = handlers.indexOf(handler);
				if (~index) handlers.splice(index, 1);
			}
		};
	}

	function set(newState) {
		this._set(assign({}, newState));
		if (this.root._lock) return;
		this.root._lock = true;
		callAll(this.root._beforecreate);
		callAll(this.root._oncreate);
		callAll(this.root._aftercreate);
		this.root._lock = false;
	}

	function _set(newState) {
		var oldState = this._state,
			changed = {},
			dirty = false;

		for (var key in newState) {
			if (this._differs(newState[key], oldState[key])) changed[key] = dirty = true;
		}
		if (!dirty) return;

		this._state = assign(assign({}, oldState), newState);
		this._recompute(changed, this._state);
		if (this._bind) this._bind(changed, this._state);

		if (this._fragment) {
			this.fire("state", { changed: changed, current: this._state, previous: oldState });
			this._fragment.p(changed, this._state);
			this.fire("update", { changed: changed, current: this._state, previous: oldState });
		}
	}

	function callAll(fns) {
		while (fns && fns.length) fns.shift()();
	}

	function _mount(target, anchor) {
		this._fragment[this._fragment.i ? 'i' : 'm'](target, anchor || null);
	}

	var proto = {
		destroy,
		get,
		fire,
		on,
		set,
		_recompute: noop,
		_set,
		_mount,
		_differs
	};

	/* src\n8d-navbar.html generated by Svelte v2.6.3 */

	function importScript(src){
		let el = document.createElement('script');
		el.src = src;
		document.head.appendChild(el);
	}
	function onstate({changed, current, previous}){
		if(!previous){
			let deps = [
				{symbol: '$', src: '/scripts/jquery-3.2.1.min.js'},
				{symbol: 'bootstrap', src: '/scripts/bootstrap.min.js'}
			];
			for(let i = 0; i != deps.length; i++){
			console.log(typeof window[deps[i].symbol]);
				if(!window[deps[i].symbol]){
					if (deps[i].symbol === 'bootstrap'){
						setTimeout(importScript.bind(this, deps[i].src), 3000);
						continue;
					}
					importScript(deps[i].src);
				}
			}
		}
	}
	function create_main_fragment(component, ctx) {
		var link, text, nav;

		return {
			c() {
				link = createElement("link");
				text = createText("\r\n\r\n");
				nav = createElement("nav");
				nav.innerHTML = "<a class=\"navbar-brand\" href=\"/\">NateD</a>\r\n\t<button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"><span class=\"navbar-toggler-icon\"></span></button>\r\n\t<div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\"><ul class=\"navbar-nav mr-auto\"><li class=\"nav-item\" id=\"home\"><a class=\"nav-link\" href=\"/\">Home <span class=\"sr-only\">(current)</span></a></li>\r\n\t\t\t<li class=\"nav-item\"><a class=\"nav-link\" href=\"#\">Link</a></li>\r\n\t\t\t<li class=\"nav-item dropdown\"><a class=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">Dropdown</a>\r\n\t\t\t\t<div class=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\"><a class=\"dropdown-item\" href=\"#\">Action</a>\r\n\t\t\t\t\t<a class=\"dropdown-item\" href=\"#\">Another action</a>\r\n\t\t\t\t\t<div class=\"dropdown-divider\"></div>\r\n\t\t\t\t\t<a class=\"dropdown-item\" href=\"#\">Something else here</a></div></li>\r\n\t\t\t<li class=\"nav-item\"><a class=\"nav-link disabled\" href=\"#\">Disabled</a></li>\r\n\t\t</ul>\r\n\t\t<form class=\"form-inline my-2 my-lg-0\"><input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\">\r\n\t\t\t<button class=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button></form></div>";
				link.href = "/css/bootstrap.min.css";
				link.rel = "stylesheet";
				nav.className = "navbar navbar-dark navbar-expand-md bg-dark";
				setStyle(nav, "color", "black");
			},

			m(target, anchor) {
				appendNode(link, document.head);
				insertNode(text, target, anchor);
				insertNode(nav, target, anchor);
			},

			p: noop,

			d(detach) {
				detachNode(link);
				if (detach) {
					detachNode(text);
					detachNode(nav);
				}
			}
		};
	}

	function N8d_navbar(options) {
		init(this, options);
		this._state = assign({}, options.data);
		this._intro = true;

		this._handlers.state = [onstate];

		if (!options.root) {
			this._oncreate = [];
		}

		this._fragment = create_main_fragment(this, this._state);

		this.root._oncreate.push(() => {
			onstate.call(this, { changed: assignTrue({}, this._state), current: this._state });
			this.fire("update", { changed: assignTrue({}, this._state), current: this._state });
		});

		if (options.target) {
			this._fragment.c();
			this._mount(options.target, options.anchor);

			callAll(this._oncreate);
		}
	}

	assign(N8d_navbar.prototype, proto);

	return N8d_navbar;

}());
